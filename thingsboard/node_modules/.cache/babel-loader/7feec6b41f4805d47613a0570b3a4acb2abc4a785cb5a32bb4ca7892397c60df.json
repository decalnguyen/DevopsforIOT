{"ast":null,"code":"import axios from 'axios';\nimport { request } from \"../utils\";\nconst authenticate = async ({\n  username,\n  password,\n  platform\n}) => {\n  const api = `https://${platform}/api/auth/login`;\n  const data = {\n    username,\n    password\n  };\n  try {\n    const response = await axios.post(api, data, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data.token;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// The data is in array format\nconst getDevicesInfo = async ({\n  token,\n  platform,\n  pageSize = 5,\n  page = 0\n}) => {\n  const api = `api/deviceInfos/all`;\n  try {\n    const response = await request.get(platform, api, token, {\n      params: {\n        pageSize,\n        page\n      }\n    });\n    return response.data.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// The data is in array format\nconst getTimeseriesData = async ({\n  entityType,\n  entityId,\n  token,\n  platform\n}) => {\n  const api = `https://${platform}/api/plugins/telemetry/${entityType}/${entityId}/values/timeseries`;\n  try {\n    const response = await axios.get(api, {\n      headers: {\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    });\n    return response.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// The data is in array format\nconst getAttributesData = async ({\n  entityType,\n  entityId,\n  token,\n  platform,\n  params\n}) => {\n  const api = `https://${platform}/api/plugins/telemetry/${entityType}/${entityId}/values/attributes`;\n  try {\n    const response = await axios.get(api, {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        Accept: 'application/json'\n      },\n      params: params\n    });\n    return response.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport { authenticate, getDevicesInfo, getTimeseriesData, getAttributesData };","map":{"version":3,"names":["axios","request","authenticate","username","password","platform","api","data","response","post","headers","Accept","token","e","console","log","getDevicesInfo","pageSize","page","get","params","getTimeseriesData","entityType","entityId","Authorization","getAttributesData"],"sources":["/home/toan/Devops_for_iot/thingsboard/src/services/request.js"],"sourcesContent":["import axios from 'axios';\nimport { request } from '~/utils';\n\nconst authenticate = async ({ username, password, platform }) => {\n  const api = `https://${platform}/api/auth/login`;\n  const data = { username, password };\n  try {\n    const response = await axios.post(api, data, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    return response.data.token;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// The data is in array format\nconst getDevicesInfo = async ({ token, platform, pageSize = 5, page = 0 }) => {\n  const api = `api/deviceInfos/all`;\n  try {\n    const response = await request.get(platform, api, token, {\n      params: {\n        pageSize,\n        page,\n      },\n    });\n    return response.data.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// The data is in array format\nconst getTimeseriesData = async ({ entityType, entityId, token, platform }) => {\n  const api = `https://${platform}/api/plugins/telemetry/${entityType}/${entityId}/values/timeseries`;\n\n  try {\n    const response = await axios.get(api, {\n      headers: {\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + token,\n      },\n    });\n    return response.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// The data is in array format\nconst getAttributesData = async ({ entityType, entityId, token, platform, params }) => {\n  const api = `https://${platform}/api/plugins/telemetry/${entityType}/${entityId}/values/attributes`;\n  try {\n    const response = await axios.get(api, {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        Accept: 'application/json',\n      },\n      params: params,\n    });\n    return response.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport { authenticate, getDevicesInfo, getTimeseriesData, getAttributesData };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO;AAEhB,MAAMC,YAAY,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAC/D,MAAMC,GAAG,GAAI,WAAUD,QAAS,iBAAgB;EAChD,MAAME,IAAI,GAAG;IAAEJ,QAAQ;IAAEC;EAAS,CAAC;EACnC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAACH,GAAG,EAAEC,IAAI,EAAE;MAC3CG,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACD,IAAI,CAACK,KAAK;EAC5B,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAChB;AACF,CAAC;;AAED;AACA,MAAMG,cAAc,GAAG,MAAAA,CAAO;EAAEJ,KAAK;EAAEP,QAAQ;EAAEY,QAAQ,GAAG,CAAC;EAAEC,IAAI,GAAG;AAAE,CAAC,KAAK;EAC5E,MAAMZ,GAAG,GAAI,qBAAoB;EACjC,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMP,OAAO,CAACkB,GAAG,CAACd,QAAQ,EAAEC,GAAG,EAAEM,KAAK,EAAE;MACvDQ,MAAM,EAAE;QACNH,QAAQ;QACRC;MACF;IACF,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B,CAAC,CAAC,OAAOM,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAChB;AACF,CAAC;;AAED;AACA,MAAMQ,iBAAiB,GAAG,MAAAA,CAAO;EAAEC,UAAU;EAAEC,QAAQ;EAAEX,KAAK;EAAEP;AAAS,CAAC,KAAK;EAC7E,MAAMC,GAAG,GAAI,WAAUD,QAAS,0BAAyBiB,UAAW,IAAGC,QAAS,oBAAmB;EAEnG,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMR,KAAK,CAACmB,GAAG,CAACb,GAAG,EAAE;MACpCI,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1Ba,aAAa,EAAE,SAAS,GAAGZ;MAC7B;IACF,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOM,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAChB;AACF,CAAC;;AAED;AACA,MAAMY,iBAAiB,GAAG,MAAAA,CAAO;EAAEH,UAAU;EAAEC,QAAQ;EAAEX,KAAK;EAAEP,QAAQ;EAAEe;AAAO,CAAC,KAAK;EACrF,MAAMd,GAAG,GAAI,WAAUD,QAAS,0BAAyBiB,UAAW,IAAGC,QAAS,oBAAmB;EACnG,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMR,KAAK,CAACmB,GAAG,CAACb,GAAG,EAAE;MACpCI,OAAO,EAAE;QACPc,aAAa,EAAE,SAAS,GAAGZ,KAAK;QAChCD,MAAM,EAAE;MACV,CAAC;MACDS,MAAM,EAAEA;IACV,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOM,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAChB;AACF,CAAC;AAED,SAASX,YAAY,EAAEc,cAAc,EAAEK,iBAAiB,EAAEI,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}